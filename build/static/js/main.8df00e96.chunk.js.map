{"version":3,"sources":["home.js","main.js","router.js","serviceWorker.js","index.js"],"names":["Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","data","sessionStorage","getItem","arr","JSON","parse","state","test","_this2","list","map","item","i","react_default","a","createElement","key","className","input","onChange","e","title","target","value","defaultValue","placeholder","es_button","type","onClick","del","item1","i1","index","add","submit","push","setState","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","message","error","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","setItem","stringify","preview","splice","props","history","Component","withRouter","Main","es_checkbox","Group","style","width","forEach","e_item","checkbox","e2_item","row","col","span","back","arr2","item2","concat","join","alert","App","HashRouter","Switch","Route","exact","path","component","render","Redirect","to","Boolean","window","location","hostname","match","ReactDOM","router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8df00e96.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './home.css';\nimport { Button, Input, message } from 'antd';\n\n\n\nclass Home extends Component {\n\n  constructor(){\n    super();\n    let data = sessionStorage.getItem('data');\n    let arr = JSON.parse(data) ? JSON.parse(data) : [];\n    this.state = {\n      test:1,\n      arr: arr\n    }\n  }\n\n  render() {\n    let list = this.state.arr.map((item,i) => {\n      return (\n            <div key={i}>\n            <div className=\"title\">\n              <div>{i + 1}.</div>\n              <div>Title</div>\n              <div>\n              <Input onChange={(e)=>{item.title =  e.target.value}} defaultValue={item.title}  placeholder=\"Question content\" />\n              </div>\n              <div><Button type=\"danger\" onClick={() => this.del(i)}>Delete</Button></div>\n            </div>\n            \n            {\n              item.item.map((item1,i1) => {\n\n                return(\n                  <div className=\"item\" key={i1}>\n                  <div>Answer {item1.index}</div>\n                  <div>\n                  <Input onChange={(e)=>{item1.value =  e.target.value}} defaultValue={item1.value} />\n                  </div>\n                </div>\n                )\n              })\n            }\n          </div>\n      )\n    })\n    return (\n      <div  className=\"main\">\n        <h1>Questionaire Editor</h1>\n        {list}\n        <div className='footer'>\n              <Button type=\"primary\"  onClick={() => this.add()}>Add Question</Button>\n              <Button type=\"danger\" onClick={() => this.submit()}>Preview</Button>\n            </div>\n      </div>\n    );\n  }\n  add(){\n    let arr = this.state.arr;\n    arr.push({\n      title:'',\n      item:[\n        {\n          index:'A',\n          value:''\n        },\n        {\n          index:'B',\n          value:''\n        },\n        {\n          index:'C',\n          value:''\n        },\n        {\n          index:'D',\n          value:''\n        }\n      ]\n    })\n    this.setState({\n      arr\n    })\n    \n           \n        \n  }\n\n  submit(){\n    if(this.state.arr.length === 0){\n      message.error('You forget to add questions.');\n      return\n    }\n    let data = true\n    for(let item of this.state.arr){\n      if(!item.title){\n        message.error('Question content should not be empty.');\n        data = false\n        break \n      }else{\n        for(let item1 of item.item){\n          if(!item1.value){\n            message.error('Answer content should not be empty.');\n            data = false\n            break \n          }\n        }\n      }\n      \n    }\n    \n    if(data){\n      sessionStorage.setItem('data', JSON.stringify(this.state.arr));\n      this.preview()\n    }\n  }\n  del(i){\n    let arr = this.state.arr;\n    arr.splice(i,1);\n    this.setState({arr})\n  }\n\n\n  // router direct to main\n  preview(e) {\n    this.props.history.push('/main')\n  }\n}\nexport default withRouter(Home)\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {Checkbox,Row, Col, Button} from 'antd'\nimport './main.css'\n\n\n\n\nclass Main extends Component {\n    constructor() {\n        super();\n        let data = sessionStorage.getItem('data');\n        let arr = JSON.parse(data);\n        this.state = {\n            arr,\n        }\n    }\n\n\n\n    render() {\n        // const radioStyle = {\n        //     display: 'block',\n        //     height: '30px',\n        //     lineHeight: '30px',\n        //   };\n       \n        \n        let list =this.state.arr.map((item,i) =>{\n            return (\n                <div key={i} >\n                    <h2>Question {i +1}:{item.title}</h2>\n\n                    {/* <RadioGroup onChange={() => {}} className=\"item\">\n                        {\n                        item.item.map((item1, i1) => {\n                            return(\n                                <Radio style={radioStyle} key={i1} value={i1}>{item1.value}</Radio>\n                            )\n                        })\n                        }\n                    </RadioGroup> */}\n                    <Checkbox.Group style={{ width: '100%' }} onChange={(e)=>{\n                        item.item.forEach((e_item) => {\n                            e_item.checkbox = false\n                            \n                        })\n                        e.forEach((e2_item) => {\n                            item.item[e2_item].checkbox = true\n                        })\n                    }}>\n                        <Row>\n                        {\n                        item.item.map((item1, i1) => {\n                            return(\n                                <Col span={24} key={i1}><Checkbox value={i1}>{item1.value}</Checkbox></Col>\n                            )\n                        })\n                        }\n                        </Row>\n                    </Checkbox.Group>\n                </div>\n                \n            )\n        })\n        return (\n            <div className=\"main-content\">\n            {list}\n            <Button type=\"primary\" onClick={()=>this.submit()}>Submit</Button>\n            <Button type=\"danger\" onClick={()=>this.back()}>Back</Button>\n            </div>\n        );\n    }\n    change(e) {\n        this.props.history.push('/')\n    }\n\n    back() {\n        sessionStorage.setItem('data', JSON.stringify(this.state.arr));\n        this.props.history.push('/')\n    }\n\n    submit() {\n        let arr = []\n        this.state.arr.forEach((item,i) => {\n            let arr2 = []\n            item.item.forEach(item2 => {\n                if(item2.checkbox){\n                    arr2.push(item2.value)\n                }\n            })\n            arr.push(`Question ${i + 1}:${item.title} ${arr2.join(',')}`)\n        })\n        alert(arr.join('----'))\n    }\n}\nexport default withRouter(Main)\n","import { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport Home from './home'\nimport Main from './main'\nimport React, { Component } from 'react';\n// HashRouter # \n// BrowserRouter history 模式\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n          <Switch>\n            {/* kwh路由 */}\n            <Route exact path=\"/\"  component={Home} />\n            {/* main页面路由 */}\n            <Route exact path=\"/main\" component={Main} />\n            {/* 默认跳转到kwh */}\n            <Route path=\"/\" render={() => {\n              return <Redirect to=\"/\" />\n            }} />\n          </Switch>\n      </HashRouter>\n    );\n  }\n}\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport React from 'react'\nimport './index.css';\nimport App from './router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}